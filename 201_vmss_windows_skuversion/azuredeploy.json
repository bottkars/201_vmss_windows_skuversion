{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "defaultValue": "Standard_A1",
      "type": "String",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "vmssName": {
      "type": "String",
      "defaultValue": "[substring(concat('vmss', uniquestring(replace(resourceGroup().Id,'-',''))), 0, 8)]",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-10 characters in length and globally unique across Azure Stack. A hash is prepended to this string for some resources, and resource-specific information is appended."
      }
    },
    "instanceCount": {
      "defaultValue": 2,
      "maxValue": 20,
      "type": "Int",
      "metadata": {
        "description": "Number of VM instances (20 or less)."
      }
    },
    "adminUsername": {
      "type": "String",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "SecureString",
      "defaultValue": "[concat('Subscription#', subscription().subscriptionId)]",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "osImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "Maps to the publisher in the Azure Stack Platform Image Repository manifest file."
      }
    },
    "osImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "Maps to the Offer in the Azure Stack Platform Image Repository manifest file."
      }
    },
    "osImageSku": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2016-Datacenter-Server-Core",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "osImageSkuVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "14393.321.20161110",
        "14393.351.20161027",
        "14393.448.20161109",
        "14393.479.20161209",
        "14393.576.20161213",
        "14393.693.20170110",
        "14393.726.20170126",
        "14393.729.20170130",
        "14393.953.20170314",
        "14393.969.20170320",
        "14393.970.20170322",
        "14393.1066.20170411",
        "14393.1198.20170509",
        "14393.1230.20170526",
        "14393.1358.20170613",
        "14393.1378.20170627",
        "14393.1480.20170711",
        "14393.1532.20170718",
        "14393.1593.20170808",
        "14393.1613.20170816",
        "14393.1670.20170828",
        "14393.1715.20170912",
        "14393.1737.20170927",
        "14393.1770.20171010",
        "14393.1794.20171017",
        "14393.1797.20171102",
        "14393.1884.20171114",
        "14393.1914.20171127",
        "14393.1944.20171212",
        "latest"
      ],
      "metadata": {
        "description": "The Windows SKU version for the VM. This will pick a fully patched image of this given Windows version"
      }
    }

  },
    "variables": {
        "location": "[resourceGroup().location]",
        "vnetName": "[toLower(concat('vnet', uniqueString(resourceGroup().id)))]",
        "subnetName": "[toLower(concat('subnet', uniqueString(resourceGroup().id)))]",
        "storageAccountName": "[toLower(concat('SA', uniqueString(resourceGroup().id)))]",
        "storageAccountContainerName": "[toLower(concat('SC', uniqueString(resourceGroup().id)))]",
        "storageAccountType": "Standard_LRS",
        "OSDiskName": "osdisk",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
        "publicIPAddressName": "[toLower(concat('pip', uniqueString(resourceGroup().id)))]",
        "vmssDomainName": "[toLower(concat('pubdns', uniqueString(resourceGroup().id)))]",
        "loadBalancerName": "[concat('LB', uniqueString(resourceGroup().id))]",
        "loadBalancerFrontEndName": "[concat('LBFrontEnd', uniqueString(resourceGroup().id))]",
        "loadBalancerBackEndName": "[concat('LBBackEnd', uniqueString(resourceGroup().id))]",
        "loadBalancerProbeName": "[concat('LBHttpProbe', uniqueString(resourceGroup().id))]",
        "loadBalancerNatPoolName": "[concat('LBNatPool', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "10.0.0.0/24"     
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('vmssDomainName')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadBalancerName')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('loadBalancerFrontEndName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('loadBalancerBackendName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "roundRobinLBRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', variables('loadBalancerProbeName'))]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('loadBalancerProbeName')]",
                        "properties": {
                            "protocol": "tcp",
                            "port": 80,
                            "intervalInSeconds": "5",
                            "numberOfProbes": "2"
                        }
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "[variables('loadBalancerNatPoolName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "50000",
                            "frontendPortRangeEnd": "50019",
                            "backendPort": "3389"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "name": "[parameters('vmSku')]",
                "tier": "Standard",
                "capacity": "[parameters('instanceCount')]"
            },
            "name": "[parameters('vmssName')]",
            "apiVersion": "2016-03-30",
            "location": "[variables('location')]",
            "properties": {
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "vhdContainers": [
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('storageAccountContainerName'))]"
                            ],
                            "name":  "[variables('OSDiskName')]",
                            "caching": "ReadOnly",
                            "createOption": "FromImage"
                        },
                      "imageReference": {
                        "publisher": "[parameters('osImagePublisher')]",
                        "offer": "[parameters('osImageOffer')]",
                        "sku": "[parameters('osImageSku')]",
                        "version": "[parameters('OsImageSkuVersion')]"
                      }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[parameters('vmssName')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic",
                                "properties": {
                                    "primary": "true",
                                    "ipConfigurations": [
                                        {
                                            "name": "ipconfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('subnetRef')]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackEndName'))]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('loadBalancerNatPoolName'))]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]"
            ]
        }
    ]
}
